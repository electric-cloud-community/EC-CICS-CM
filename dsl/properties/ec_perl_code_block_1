# Shared Code Block 1
# -------------------

# Fetch input parameters into a hash
my $jobStepId = $ENV{COMMANDER_JOBSTEPID};
my $xpath =  $ec->getActualParameters({jobStepId => $jobStepId});

my %params;
foreach my $node($xpath->find('//actualParameter')->get_nodelist()) {
    my $paramName = $node-> find('actualParameterName')->string_value();
    my $paramValue = $node-> find('value')->string_value();
    $params{$paramName} = $paramValue;
}

# Do value checking and error reporting on input parameters

my $errorsFound = 0;
my @names = keys %params;
for my $name (@names) {
    # If parameter is optional, allow undefined or empty value
    if (any {$_ eq $name} @optionalParams) {
       next if ((!defined $params{$name}) || ($params{$name} eq ''));
    }
    
    # If there is a regexp defined for $name in %valid, emit an error if the value doesn't match it
    if (defined $valid{$name}) {
        if ($params{$name} !~ $valid{$name}) {
            $errorsFound++;
            print "ERROR: actual parameter named $name with value '$params{$name}' does not match the regular espression $valid{$name} defining allowed values!\n";
        }
    }
}

# Stop if we found any errors
exit -1 if ($errorsFound);

# Fetch plugin config values using $param{'configurationName'}
my $server = $ec->getProperty("/plugins/EC-CICS-CM/project/ec_plugin_cfgs/$param{'configurationName'}/server")
                ->findnodes(“//value”)
                ->string_value();
my $port = $ec->getProperty("/plugins/EC-CICS-CM/project/ec_plugin_cfgs/$param{'configurationName'}/port")
              ->findnodes(“//value”)
              ->string_value();
my $endpoint = $server . ':' . $port;
my $credentialName = $ec->getProperty("/plugins/EC-CICS-CM/project/ec_plugin_cfgs/$param{'configurationName'}/credential")
                        ->findnodes(“//value”)
                        ->string_value();
my $fullCredential = $ec->getFullCredential"/plugins/EC-CICS-CM/project/credentials/$credentialName", {value => "password"});
my $username = $fullCredential->find("//user");
my $password = $fullCredential->find("//password");

# TODO Handle nonstandard code page 1047 XML escaping of unusual characters

# Marshal the input parameters into SOAP::Data

# Subroutine for a common pattern in SOAP::Data
sub SoapData {
    return SOAP::Data->name($_[0] => $params{$_[0]});
}

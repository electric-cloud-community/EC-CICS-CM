# Shared Code Block 1
# -------------------

# Fetch input parameters into a hash
my $xpath;
if ( $[/javascript (typeof(myParent.jobStepId) == "undefined") ? "1" : "0"] ) {
    $xpath = $ec->getActualParameters({jobId => $ENV{COMMANDER_JOBID}});
}
else {
    $xpath = $ec->getActualParameters({jobStepId => '$[/javascript myParent.jobStepId]'});
}
my %params;
foreach my $node($xpath->find('//actualParameter')->get_nodelist()) {
    my $paramName = $node-> find('actualParameterName')->string_value();
    my $paramValue = $node-> find('value')->string_value();
    $params{$paramName} = $paramValue;
}

# Do value checking and error reporting on input parameters

my $errorsFound = 0;
my @names = keys %params;
for my $name (@names) {
    # If parameter is optional, allow undefined or empty value    
    if (grep( /^$name$/, @optionalParams)) {
       next if (!(length($params{$name}) > 0));
    }
    
    # If there is a regexp defined for $name in %valid, emit an error if the value doesn't match it
    if (defined $valid{$name}) {
        if ($params{$name} !~ $valid{$name}) {
            $errorsFound++;
            print "ERROR: actual parameter named $name with value '$params{$name}' does not match the regular expression $valid{$name} defining allowed values!\n";
        }
    }
}

# Stop if we found any errors
exit -1 if ($errorsFound);

# Fetch plugin config values using $params{'configurationName'}
my $endpoint = $ec->getProperty("/plugins/EC-CICS-CM/project/ec_plugin_cfgs/$params{'configurationName'}/ccUrl")
                ->findnodes("//value")
                ->string_value();
my $ccVersion = $ec->getProperty("/plugins/EC-CICS-CM/project/ec_plugin_cfgs/$params{'configurationName'}/ccVersion")
                ->findnodes("//value")
                ->string_value();
my $credentialName = $ec->getProperty("/plugins/EC-CICS-CM/project/ec_plugin_cfgs/$params{'configurationName'}/credential")
                        ->findnodes("//value")
                        ->string_value();
my $codePage = $ec->getProperty("/plugins/EC-CICS-CM/project/ec_plugin_cfgs/$params{'configurationName'}/codePage")
                        ->findnodes("//value")
                        ->string_value();
my $cp037 = ($codePage eq '037');                        
my $plugin = $ec->getPlugin("EC-CICS-CM");
my $projectName = $plugin->find("//projectName");
my $fullCredential = $ec->getFullCredential("/projects/$projectName/credentials/$credentialName", {value => "password"});
my $username = $fullCredential->find("//user");
my $password = $fullCredential->find("//password");

# Handle nonstandard EBCDIC XML escaping of unusual characters 

# Lookup table to convert UTF-8 versions of characters defined in Latin-1 to hex encoded EBCDIC code page 037
my %ebcdic = (
    "\x00" => '00',
    "\x01" => '01',
    "\x02" => '02',
    "\x03" => '03',
    "\x{C29C}" => '04',
    "\x09" => '05',
    "\x{C286}" => '06',
    "\x7F" => '07',
    "\x{C297}" => '08',
    "\x{C28D}" => '09',
    "\x{C28E}" => '0A',
    "\x0B" => '0B',
    "\x0C" => '0C',
    "\x0D" => '0D',
    "\x0E" => '0E',
    "\x0F" => '0F',
    "\x10" => '10',
    "\x11" => '11',
    "\x12" => '12',
    "\x13" => '13',
    "\x{C29D}" => '14',
    "\x85" => '15',
    "\x08" => '16',
    "\x{C287}" => '17',
    "\x18" => '18',
    "\x19" => '19',
    "\x{C292}" => '1A',
    "\x{C28F}" => '1B',
    "\x1C" => '1C',
    "\x1D" => '1D',
    "\x1E" => '1E',
    "\x1F" => '1F',
    "\x{C280}" => '20',
    "\x{C281}" => '21',
    "\x{C282}" => '22',
    "\x{C283}" => '23',
    "\x{C284}" => '24',
    "\x0A" => '25',
    "\x17" => '26',
    "\x1B" => '27',
    "\x{C288}" => '28',
    "\x{C289}" => '29',
    "\x{C28A}" => '2A',
    "\x{C28B}" => '2B',
    "\x{C28C}" => '2C',  
    "\x05" => '2D',
    "\x06" => '2E',
    "\x07" => '2F',
    "\x{C290}" => '30',
    "\x{C291}" => '31',
    "\x16" => '32',
    "\x{C293}" => '33',
    "\x{C294}" => '34',
    "\x{C295}" => '35',
    "\x{C296}" => '36',
    "\x04" => '37',
    "\x{C298}" => '38',
    "\x{C299}" => '39',
    "\x{C29A}" => '3A',
    "\x{C29B}" => '3B',
    "\x14" => '3C',
    "\x15" => '3D',
    "\x{C29E}" => '3E',
    "\x1A" => '3F',
    ' ' => '40',
    "\x{C2A0}" => '41',
    'â' => '42',
    'ä' => '43',
    'à' => '44',
    'á' => '45',
    'ã' => '46',
    'å' => '47',
    'ç' => '48',
    'ñ' => '49',
    '¢' => '4A',
    '.' => '4B',
    '<' => '4C',
    '(' => '4D',
    '+' => '4E',
    '|' => '4F',
    '&' => '50',
    'é' => '51',
    'ê' => '52',
    'ë' => '53',
    'è' => '54',
    'í' => '55',
    'î' => '56',
    'ï' => '57',
    'ì' => '58',
    'ß' => '59',
    '!' => '5A',
    '$' => '5B',
    '*' => '5C',
    ')' => '5D',
    ';' => '5E',
    '¬' => ($cp037 ? '5F' : 'B0'),
    '-' => '60',
    '/' => '61',
    'Â' => '62',
    'Ä' => '63',
    'À' => '64',
    'Á' => '65',
    'Ã' => '66',
    'Å' => '67',
    'Ç' => '68',
    'Ñ' => '69',
    '¦' => '6A',
    ',' => '6B',
    '%' => '6C',
    '_' => '6D',
    '>' => '6E',
    '?' => '6F',
    'ø' => '70',
    'É' => '71',
    'Ê' => '72',
    'Ë' => '73',
    'È' => '74',
    'Í' => '75',
    'Î' => '76',
    'Ï' => '77',
    'Ì' => '78',
    '`' => '79',
    ':' => '7A',
    '#' => '7B',
    '@' => '7C',
    '\'' => '7D',
    '=' => '7E',
    '"' => '7F',
    'Ø' => '80',
    'a' => '81',
    'b' => '82',
    'c' => '83',
    'd' => '84',
    'e' => '85',
    'f' => '86',
    'g' => '87',
    'h' => '88',
    'i' => '89',
    '«' => '8A',
    '»' => '8B',
    'ð' => '8C',
    'ý' => '8D',
    'þ' => '8E',
    '±' => '8F',
    '°' => '90',
    'j' => '91',
    'k' => '92',
    'l' => '93',
    'm' => '94',
    'n' => '95',
    'o' => '96',
    'p' => '97',
    'q' => '98',
    'r' => '99',
    'ª' => '9A',
    'º' => '9B',
    'æ' => '9C',
    '¸' => '9D',
    'Æ' => '9E',
    '¤' => '9F',
    'µ' => 'A0',
    '~' => 'A1',
    's' => 'A2',
    't' => 'A3',
    'u' => 'A4',
    'v' => 'A5',
    'w' => 'A6',
    'x' => 'A7',
    'y' => 'A8',
    'z' => 'A9',
    '¡' => 'AA',
    '¿' => 'AB',
    'Ð' => 'AC',
    'Ý' => ($cp037 ? 'AD' : 'BA'),
    'Þ' => 'AE',
    '®' => 'AF',
    '^' => ($cp037 ? 'B0' : '5F'),
    '£' => 'B1',
    '¥' => 'B2',
    '·' => 'B3',
    '©' => 'B4',
    '§' => 'B5',
    '¶' => 'B6',
    '¼' => 'B7',
    '½' => 'B8',
    '¾' => 'B9',
    '[' => ($cp037 ? 'BA' : 'AD'),
    ']' => ($cp037 ? 'BB' : 'BD'),
    '¯' => 'BC',
    '¨' => ($cp037 ? 'BD' : 'BB'),
    '´' => 'BE',
    '×' => 'BF',
    '{' => 'C0',
    'A' => 'C1',
    'B' => 'C2',
    'C' => 'C3',
    'D' => 'C4',
    'E' => 'C5',
    'F' => 'C6',
    'G' => 'C7',
    'H' => 'C8',
    'I' => 'C9',
    "\x{C2AD}" => 'CA',
    'ô' => 'CB',
    'ö' => 'CC',
    'ò' => 'CD',
    'ó' => 'CE',
    'õ' => 'CF',
    '}' => 'D0',
    'J' => 'D1',
    'K' => 'D2',
    'L' => 'D3',
    'M' => 'D4',
    'N' => 'D5',
    'O' => 'D6',
    'P' => 'D7',
    'Q' => 'D8',
    'R' => 'D9',
    '¹' => 'DA',
    'û' => 'DB',
    'ü' => 'DC',
    'ù' => 'DD',
    'ú' => 'DE',
    'ÿ' => 'DF',
    '\\' => 'E0',
    '÷' => 'E1',
    'S' => 'E2',
    'T' => 'E3',
    'U' => 'E4',
    'V' => 'E5',
    'W' => 'E6',
    'X' => 'E7',
    'Y' => 'E8',
    'Z' => 'E9',
    '²' => 'EA',
    'Ô' => 'EB',
    'Ö' => 'EC',
    'Ò' => 'ED',
    'Ó' => 'EE',
    'Õ' => 'EF',
    '0' => 'F0',
    '1' => 'F1',
    '2' => 'F2',
    '3' => 'F3',
    '4' => 'F4',
    '5' => 'F5',
    '6' => 'F6',
    '7' => 'F7',
    '8' => 'F8',
    '9' => 'F9',
    '³' => 'FA',
    'Û' => 'FB',
    'Ü' => 'FC',
    'Ù' => 'FD',
    'Ú' => 'FE',
    "0x{C29F}" => 'FF'
);

# Build inverse lookup tables EBCDIC-hex -> Latin-1/UTF-8 for use when decoding responses and error responses
my %ascii; # For use in an ASCII/Latin-1/UTF-8 text context
my %asciiXml; # For use in a UTF-8 XML context
for my $char (keys(%ebcdic)) {
    $ascii{$ebcdic{$char}} = $char;
    $asciiXml{$ebcdic{$char}} = $char;
}
$asciiXml{'4C'} = '&lt;';
$asciiXml{'6E'} = '&gt;';
$asciiXml{'50'} = '&amp;';

# Apply EBCDIC encoding
for my $key (keys(%params)) {
    my $value = $params{$key};
    
    # In the only context where XML is allowed, pass < and > through
    if (($key eq 'ObjectCriteria' ) ||        
        (($key eq 'ObjectData' ) &&
         (($soapMethodName eq 'Create') || ($soapMethodName eq 'Update')) &&
         ($params{'LocationType'} eq 'Repository') &&
         ($params{$key} =~ m|=\s*<[A-Za-z]+>.*</[A-Za-z]+>\s*$|))) {
        $value =~ s/([^\sA-Za-z0-9\~\!\@\#\$\*\(\)\_\-\+\=\{\}\[\]\\\:\;\,\.\/\?\<\>])/exists($ebcdic{$1}) ? '%'.$ebcdic{$1} : {print "ERROR: Character '$1' cannot be encoded in EBCDIC code page 037!\n" and exit -1}/egs
    } else {
        $value =~ s/([^\sA-Za-z0-9\~\!\@\#\$\*\(\)\_\-\+\=\{\}\[\]\\\:\;\,\.\/\?])/exists($ebcdic{$1}) ? '%'.$ebcdic{$1} : {print "ERROR: Character '$1' cannot be encoded in EBCDIC code page 037!\n" and exit -1}/egs
    }
    $params{$key} = $value;
}
   
#
# Marshal the input parameters into SOAP::Data
#

# Subroutines for common patterns for using SOAP::Data

# Required parameter
sub SoapData {
    my $name = $_[0];
    if (length($params{$name}) > 0) {
        return SOAP::Data->name($name => $params{$name});
    } else {
        print "ERROR: the value of the required parameter $name was undefined or empty!\n";
        exit -1;
    }
}

# Optional parameter (return value is a list which may be empty)
sub SoapDataOptional {
    return ((length($params{$_[0]}) > 0) ? ( SOAP::Data->name($_[0] => $params{$_[0]}) ) : ( ) );
}

# Convert RestrictionCriteria to XML
# Shared across various List* procedures
sub makeRestrictionCriteria {
    my ($restrictionCriteria) = @_;
    my @RestrictionCriteria;

    if (length($restrictionCriteria) > 0) {

        # First go through and collect all the counts
        my $restrictionCount = 0;
        my %listCount;
        my @lines = split(/\n/, $restrictionCriteria); # Split into lines
        foreach my $line (@lines) {
            $listCount{$line} = 0;
            my @parts = split(/\s+/, $line); # Split line on whitespace
            foreach my $part (@parts) {
                my @pieces = split(/\./, $part, 3); # Split at first two .'s into field, operator, and value
                if (@pieces == 3) {
                    $listCount{$line}++;
                }
            else
            {
                print "ERROR: Unable to parse Restriction Criteria near '$part'!\n";
                exit -1;
            }
            }
            if ($listCount{$line} > 0) {
                $restrictionCount++;
            }
        }

        if ($restrictionCount > 0) {

            # Now we have counts, go through again and build the actual output
            push(@RestrictionCriteria, SOAP::Data->name('RestrictionCount' => $restrictionCount));
            foreach my $line (@lines) {
                if ($listCount{$line} > 0) {
                    my @RestrictionElement;
                    push(@RestrictionElement, SOAP::Data->name('ListCount' => $listCount{$line}));
                    my @parts = split(/\s+/, $line); # Split line on whitespace
                    foreach my $part (@parts) {
                        my @pieces = split(/\./, $part, 3); # Split at first two .'s into field, operator, and value
                        if (@pieces == 3) {
                            push(@RestrictionElement, SOAP::Data->name('ListElement' => \SOAP::Data->value(
                                SOAP::Data->name('RestrictionField' => $pieces[0]),
                                SOAP::Data->name('RestrictionOperator' => $pieces[1]),
                                SOAP::Data->name('RestrictionValue' => $pieces[2])
                            )));
                        }
                    }
                    push(@RestrictionCriteria, SOAP::Data->name('RestrictionElement' => \SOAP::Data->value(@RestrictionElement)));
                }
            }
        }
    }
    
    my @result;
    push(@result, SOAP::Data->name('RestrictionCriteria' => \SOAP::Data->value(@RestrictionCriteria)));
    return @result;
}

# Build XML for parameters specified by a list, if they have values, or if they don't, complain unless they're optional
sub getSoapParameters {
    my ($params, %paramsForEvaluate) = @_;
    my @paramsForRequest;
    for my $param (@{$params}) {
        if (length($paramsForEvaluate{$param}) > 0) {
            push(@paramsForRequest, SoapData($param));
        } elsif (!(grep( /^$param$/, @optionalParams))) {
            print "ERROR: the value of the required parameter $param was undefined or empty!\n";
            exit -1;
        }
    }
    return @paramsForRequest;
}

# Chack XML is valid (without a specific DSD)
sub validateXML {
    my ($str) = @_;
    my $parser = XML::LibXML->new;
    $parser->validation(0);
    $parser->parse_string($str);
}

# Convert ObjectCriteria to XML
# Shared across many procedures
sub createObjectCriteria {
    my ($mandatory, $addCConfig, $wrapper, $params, $wrapSingleElement) = @_;
    my %params = %$params;
    my @mandatory = @{$mandatory};

    my @soapParams;
    if($wrapper ne "") {
        @soapParams =  SOAP::Data->name($wrapper => \SOAP::Data->value(
            getSoapParameters(\@mandatory, %params)
        ));
    }
    else {
        @soapParams =  (
           getSoapParameters(\@mandatory, %params)
        );
    }
    my @configValue;
    if($addCConfig eq '1') {
        push(@configValue, SoapData('CConfig'));
    }

    my @ObjectCriteria;
    if (!(length($params{'ObjectCriteria'}) > 0)) {
        if($wrapSingleElement) {
            @ObjectCriteria = SOAP::Data->name('ObjectCriteria' => \SOAP::Data->value(
                SOAP::Data->name('ListCount' => '1'),
                SOAP::Data->name('ListElement' => \SOAP::Data->value(
                    @configValue,
                    @soapParams
                ))
            ));
        }
        else {
            # No ObjectCriteria, so we only have one element, and can omit the <ListCount> and <ListElement>
            @ObjectCriteria = SOAP::Data->name('ObjectCriteria' => \SOAP::Data->value(
                @configValue,
                @soapParams
            ));
        }
    } else {
        my $objectCriteria = $params{'ObjectCriteria'};
        
        validateXML($objectCriteria);
        my @matches = $objectCriteria =~ m/<ListElement\s*>/si;
        my $listCount = 1 + @matches;
        if ($listCount <= 1) {
            print "ERROR: Serialized Object Criteria did not contain any <ListElement> tags!\n";
            exit -1;
        }    
        ### TODO LATER NICE-TO-HAVE Do further checks on $objectCriteria XML content against $wrapper, $params, $wrapSingleElement
        
        @ObjectCriteria = SOAP::Data->name('ObjectCriteria' => \SOAP::Data->value(
            @configValue,
            SOAP::Data->name('ListCount' => $listCount),
            SOAP::Data->type('xml' => $objectCriteria),
            SOAP::Data->name('ListElement' => \SOAP::Data->value(
                @soapParams
            )),            
        ));
    }
    return @ObjectCriteria;
}

# Convert ObjectData to XML
# Shared across Alter, Create*, Update*
sub createObjectData {
    my ($objectData, $xmlValuesAllowed) = @_;
    my @ObjectData;
    if (!(length($objectData) > 0)) { ### TODO LATER CODE-SMELL Handle case where this can be optional here, and deal with SOAP XML hackery?
        print "ERROR: Object Data Name-Value Pairs missing!\n";
        exit -1;
    } else {
        # Build @ObjectData
        my @lines = split(/\n/, $objectData); # Split into lines
        foreach my $line (@lines) {
            my @pieces = split(/=/, $line, 2); # Split at first = into name and value
            if (@pieces == 2) {
                if ($xmlValuesAllowed && ($pieces[1] =~ m|^\s*<[A-Za-z]+>.*</[A-Za-z]+>\s*$|)) {
                    push(@ObjectData, SOAP::Data->name($pieces[0] => SOAP::Data->type('xml' => $pieces[1])));
                } else {
                    push(@ObjectData, SOAP::Data->name($pieces[0] => $pieces[1]));
                } 
            } else {
                print "ERROR: Unable to parse Object Data Name-Value pairs at '$line'!\n";
                exit -1;
            }
        }
    }
    return @ObjectData;
}

